#!/usr/bin/env python

import struct,time,rospy
import math
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Vector3

#A simplified wrist program just for testing purposes



pan  = 0.0
tilt = 0.0

panpos = 0.0
tiltpos = 0.0

pan_increase = 0

stop_control = 1
new_command = True
mode = 0 # 0:+90 down 1:-90 down

def joystick_callback(joymsg):
	global pan,tilt,panpos,tiltpos,stop_control,mode, new_command, pan_increase
	new_command = True
	if abs(joymsg.axes[3])>0.12:
		pan = joymsg.axes[3]*-0.01
	else:
		pan = 0.0
	if abs(joymsg.axes[4])>0.12:
		tilt = joymsg.axes[4]*0.01
	else:
		tilt = 0.0
	if joymsg.buttons[5]:
		mode += 1
		mode = mode%2
		tiltpos = -1.53432375
	if joymsg.buttons[2]: #x
	    if pan_increase == 0:
	        pan_increase = math.pi*0.5/180
            else:
                pan_increase = 0

	if joymsg.buttons[1]: #b
	    if pan_increase == 0:
	        pan_increase = -math.pi*0.5/180
            else:
                pan_increase = 0

	if joymsg.buttons[4]:
		stop_control = -stop_control
	if joymsg.buttons[3]:
		tiltpos = 0.0
		panpos = 0.0
def main():
	global panpos,tiltpos,stop_control, new_command, pan_increase
	stop_control = 1
	rospy.init_node("joystick_ptu_node",anonymous = True)
	rospy.Subscriber("/joy",Joy,joystick_callback)
	pub = rospy.Publisher("/ptu/cmd_pos",Vector3,queue_size = 1)
	#rospy.Subscriber("/ptu/vel",Joy,control_callback)
	rate = rospy.Rate(5)
	while not rospy.is_shutdown():
		if stop_control == -1:
			continue
		vector = Vector3()
		panpos += pan
		tiltpos += tilt

		check_pose = panpos+pan_increase 
		if check_pose > 2.3 or check_pose < -1.1:
		    pan_increase = 0
		panpos += pan_increase 
		#print('pan_increase ', pan_increase, panpos)

		panpos = panpos #max(min(panpos,1.0),-1.0)
		tiltpos = tiltpos #max(min(tiltpos,0.3),-1.0)
		vector.x = panpos
		vector.y = tiltpos
		#print(panpos, tiltpos)
		pub.publish(vector)
		new_command = False
		rate.sleep()

main()


